% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findReversible.R
\name{findReversible}
\alias{findReversible}
\title{Find reversible mutation matrix}
\usage{
findReversible(mutmat, method = "BA", afreq = NULL, check = TRUE)
}
\arguments{
\item{mutmat}{A mutation matrix.}

\item{method}{Character. 'MH','PR' or 'BA'}

\item{afreq}{A vector with allele frequencies
of the same length as the size of mutmat.}

\item{check}{Logical.}
}
\value{
Reversible mutation matrix. The expected mutation rate
of the balanced matrix is returned as `rate`.
}
\description{
The Metropolis - Hastings algorithm is used to convert
a mutation matrix to a reversible one.
}
\details{
Three different approaches are implemented.
The \code{method = "MH"}, based on the traditional proposal of MCMC,
gives a balanced matrix with off diagonal elements

\code{q_{ij} min(1, p_j/p_i * q_{ji}/q_{ij})}

where \code{q_{ij}} and \code{p_i} are the elements of the original mutation
matrix and the allele frequencies, respectively.

The method \code{method = "BA"}, gives a balanced matrix with off diagonal elements

\code{p_j q_{ij}q_{ji} / (p_i q_{ij} + (p_j q_{ji})}.

The  method \code{method = "PR"} is given by

\code{(p_i q_{ij} + p_j q_{ji} ) / (2p_i)}

if \code{q_{ji} < p_i, i neq j} (and may otherwise fail to balance).
The expected mutation rate is preserved.
}
\examples{
library(pedmut)
n = 4
p = 1:n/sum(1:n)
names(p) = 1:n
mutmat = mutationMatrix("onestep", rate = 0.02, afreq = p, alleles = 1:n)
R1 = findReversible(mutmat, method = "MH")
expectedMutationRate(R1)
isReversible(R1)
R2 = findReversible(mutmat, method = "PR")
isReversible(R2)

R3 = findReversible(mutmat, method = "BA")
isReversible(R3)
}
\author{
Thore Egeland
}
